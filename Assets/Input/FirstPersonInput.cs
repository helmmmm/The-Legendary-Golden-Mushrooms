//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/FirstPersonInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FirstPersonInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FirstPersonInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FirstPersonInput"",
    ""maps"": [
        {
            ""name"": ""FPS Gameplay Controls"",
            ""id"": ""a881d99f-1205-4837-aa6d-47b1295023d0"",
            ""actions"": [
                {
                    ""name"": ""CameraPan"",
                    ""type"": ""Value"",
                    ""id"": ""556eb9b0-5bee-4188-94fe-bbff3987478e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerMove"",
                    ""type"": ""Value"",
                    ""id"": ""a833ffbe-a728-4197-bebd-7397bf056327"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5b08c39-acac-4b0f-97ca-296ec175aa03"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""CameraPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""894e7512-7a25-4ba9-bab5-48c9a0e06ef3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb4d22b3-dd85-4870-91c3-1e1adce6bbb2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fc56f7e5-12db-42c0-bb87-37202be6c27b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1630fbc-7342-4d29-af9d-38be593693d1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ced092fc-93da-4bef-adf2-b20339dccfd3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FPS Gameplay Controls
        m_FPSGameplayControls = asset.FindActionMap("FPS Gameplay Controls", throwIfNotFound: true);
        m_FPSGameplayControls_CameraPan = m_FPSGameplayControls.FindAction("CameraPan", throwIfNotFound: true);
        m_FPSGameplayControls_PlayerMove = m_FPSGameplayControls.FindAction("PlayerMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPS Gameplay Controls
    private readonly InputActionMap m_FPSGameplayControls;
    private List<IFPSGameplayControlsActions> m_FPSGameplayControlsActionsCallbackInterfaces = new List<IFPSGameplayControlsActions>();
    private readonly InputAction m_FPSGameplayControls_CameraPan;
    private readonly InputAction m_FPSGameplayControls_PlayerMove;
    public struct FPSGameplayControlsActions
    {
        private @FirstPersonInput m_Wrapper;
        public FPSGameplayControlsActions(@FirstPersonInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraPan => m_Wrapper.m_FPSGameplayControls_CameraPan;
        public InputAction @PlayerMove => m_Wrapper.m_FPSGameplayControls_PlayerMove;
        public InputActionMap Get() { return m_Wrapper.m_FPSGameplayControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSGameplayControlsActions set) { return set.Get(); }
        public void AddCallbacks(IFPSGameplayControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSGameplayControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSGameplayControlsActionsCallbackInterfaces.Add(instance);
            @CameraPan.started += instance.OnCameraPan;
            @CameraPan.performed += instance.OnCameraPan;
            @CameraPan.canceled += instance.OnCameraPan;
            @PlayerMove.started += instance.OnPlayerMove;
            @PlayerMove.performed += instance.OnPlayerMove;
            @PlayerMove.canceled += instance.OnPlayerMove;
        }

        private void UnregisterCallbacks(IFPSGameplayControlsActions instance)
        {
            @CameraPan.started -= instance.OnCameraPan;
            @CameraPan.performed -= instance.OnCameraPan;
            @CameraPan.canceled -= instance.OnCameraPan;
            @PlayerMove.started -= instance.OnPlayerMove;
            @PlayerMove.performed -= instance.OnPlayerMove;
            @PlayerMove.canceled -= instance.OnPlayerMove;
        }

        public void RemoveCallbacks(IFPSGameplayControlsActions instance)
        {
            if (m_Wrapper.m_FPSGameplayControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSGameplayControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSGameplayControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSGameplayControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSGameplayControlsActions @FPSGameplayControls => new FPSGameplayControlsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IFPSGameplayControlsActions
    {
        void OnCameraPan(InputAction.CallbackContext context);
        void OnPlayerMove(InputAction.CallbackContext context);
    }
}
